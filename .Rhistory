plot(1,1)
?lapply
random(100)
rand(100)
range(1,100)
rnorm(100,50,12.5)
means <- c(12,24,17,88,73,77,44)
?lapply
lapply(means, rnorm())
test <- c(100,50,12.5)
rnorm(test)
rnorm(100)
lapply(means, rnorm)
exit
clear()
q()
?merge
points(1,1)
plot.new
plot.new()
points(1,1)
points(10,1)
points(2,1)
points(2,4)
?plot.new
plot(1,1)
hist(rnorm(1000,100,17))
hist(rnorm(10000,100,17))
?cacheSweave
??cacheSweave
install.packages("DESeq2")
install.packages("ggplot2")
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
biocLite()
library(ggplot2)
ggplot(1,1)
search()
search(ggplot2)
search(package:ggplot2)
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
find.packages("devtools")
biocLite()
find.package("devtools")
install.package("devtools")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
find_rtools()
library("devtools")
find_rtools()
install.packages("KernSmooth")
library("KernSmooth")
install.packages("knitr")
install_github('slidifyLibraries', 'ramnathv', ref = 'dev')
library("devtools")
install_github('slidify', 'ramnathv')
library(slidify)
library(devtools)
install_github('slidifyLibraries', 'ramnathv')
exit
install.packages("swirl")  # Installs swirl
library(swirl)
swirl()
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDic
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,20, by=0.5)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapes = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Matthias_Kopf")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf/Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,
| 10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix()
?matrix
myMatrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
exit
q()
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364-15.10000
tapply(mtcars$mpg, mtcars$cyl, mean)
x <- tapply(mtcars$mpg, mtcars$cyl, mean)
x
x[1]-x[3]
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
26.66364 - 15.10000
sapply(split(mtcars$hp, mtcars$cyl), mean)
?mtcars
209.21429-82.63636
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
matrix()
matrix(1:10,2,5)
matrix(1:9,3,3)
my_matrix <- matrix(1:9,3,3)
solve(my_matrix)
my_matrix <- matrix(1:2,5)
my_matrix <- matrix(1:10,2,5)
solve(my_matrix)
my_matrix <- matrix(1:25,5,5)
my_matrix
solve(my_matrix)
my_matrix <- matrix(rnorm(25),5,5)
solve(my_matrix)
my_matrix
makeCacheMatrix <- function(x = matrix()) {
Inverse <<- solve(x)
list(Inverse = Inverse)
}
makeCacheMatrix(my_matrix)
myCacheMatrix <- makeCacheMatrix(my_matrix)
myCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
Inverse <<- solve(x)
list(x = x, Inverse = Inverse)
}
myCacheMatrix <- makeCacheMatrix(my_matrix)
myCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
Inverse <<- solve(x)
list(original = x, Inverse = Inverse)
}
myCacheMatrix
myCacheMatrix <- makeCacheMatrix(my_matrix)
myCacheMatrix
myCacheMatrix$original
myCacheMatrix$inverse
makeCacheMatrix <- function(x = matrix()) {
inverse <<- solve(x)
list(original = x, inverse = inverse)
}
myCacheMatrix <- makeCacheMatrix(my_matrix)
myCacheMatrix
myCacheMatrix$inverse
myCacheMatrix$original
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
get <- function() x
set <- function(y) {
x <<- y
m <<- NULL
}
setInverse <- function(inverse) inverse <<- solve(m)
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
myCacheMatrix <- makeCacheMatrix(my_matrix)
myCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() x
set <- function(y) {
x <<- y
inverse <<- NULL
}
setInverse <- function(inverse) inverse <<- solve(m)
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
myCacheMatrix <- makeCacheMatrix()
myCacheMatrix.set(my_matrix)
myCacheMatrix
myCacheMatrix$set(my_matrix)
myCacheMatrix
myCacheMatrix$get()
myCacheMatrix$getInverse()
myCacheMatrix$setInverse()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() x
set <- function(y) {
x <<- y
inverse <<- NULL
}
setInverse <- function(x) inverse <<- solve(m)
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
myCacheMatrix <- makeCacheMatrix()
myCacheMatrix.set(my_matrix)
myCacheMatrix.set(my_matrix)
myCacheMatrix <- makeCacheMatrix()
myCacheMatrix.set(my_matrix)
myCacheMatrix$set(my_matrix)
myCacheMatrix$setInverse()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() x
set <- function(y) {
x <<- y
inverse <<- NULL
}
setInverse <- function(x) inverse <<- solve(x)
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
myCacheMatrix <- makeCacheMatrix()
myCacheMatrix$set(my_matrix)
myCacheMatrix$setInverse()
myCacheMatrix$getInverse()
x
myCacheMatrix$get()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() x
set <- function(y) {
x <- y
inverse <<- NULL
}
setInverse <- function(x) inverse <<- solve(x)
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
myCacheMatrix <- makeCacheMatrix()
myCacheMatrix$set(my_matrix)
myCacheMatrix$setInverse()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() x
set <- function(y) {
x <<- y
inverse <<- NULL
}
setInverse <- function(x) inverse <<- solve(x)
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
myCacheMatrix <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() x
set <- function(y) {
x <<- y
print(x)
inverse <<- NULL
}
setInverse <- function(x) inverse <<- solve(x)
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
myCacheMatrix <- makeCacheMatrix()
myCacheMatrix$set(my_matrix)
x
install.packages("RMySQL")
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
ucscDB <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB,"show databases;"); dbDisconnect(ucscDB);
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("httr")
http://localhost:1410
source('~/.active-rstudio-document', echo=TRUE)
oauth_endpoints("github")
myapp <- oauth_app("github", "22585f9400f21397fbf0")
myapp <- oauth_app("github", "22585f9400f21397fbf0")
myapp <- oauth_app("github", key="22585f9400f21397fbf0",
secret="a49a55dbd8dc699f2b741661e22d877929eecbfa")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
BodyWeight
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?print.trellis
?splom
?trellis.par.set
library(datasets)
data(airquality)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data=airquality)
library(ggplot2)
qplot(Wind, Ozone, data=airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality
str(airquality)
library(datasets)
data(airquality)
str(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies, aes(votes, rating))
ggplot(movies, aes(votes, rating), geom="points")
g + geom_point()
qplot(votes, rating, data = movies)
q <- qplot(votes, rating, data = movies)
q + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
log10(100000)
sqrt(100000)
sqrt(1000)
log10(100000)
log10(1000)
data <- read.csv(unzip("activity.zip"))
data <- read.csv(unzip("activity.zip"))
setwd("C:/Users/matze/SkyDrive/Dokumente/Coursera/Reproducible_Research")
data <- read.csv(unzip("activity.zip"))
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
meanStepsPerIntervalDayFactorWise <- aggregate(steps ~ interval + dayFactors,
filledData, mean)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
data <- read.csv(unzip("activity.zip"))
meanStepsPerInterval <- aggregate(steps ~ interval, data, mean)
maxIndex <- which.max(meanStepsPerInterval[,2])
#return the Interval and average step number
meanStepsPerInterval[maxIndex,]
filledData <- data
for (i in 1:nrow(data)){
#cheack if a row contains "NA" as steps value
if (is.na(data[i,]$steps)){
#get the interval of the row
meanInterval <- data[i,]$interval
#get the previously calculated corresponding mean value
meanSteps <- meanStepsPerInterval[meanStepsPerInterval$interval==meanInterval,]$steps
#overwrite the "NA" with the corresponding rounded mean value
filledData[i,]$steps <- round(meanSteps, digits = 0)
}
}
days <- weekdays(as.Date(data$date))
#classify in "weekday" or "weekend" and convert it to factors
dayFactors <- as.factor(ifelse(days %in% c("Saturday","Sunday"),
"weekend", "weekday"))
#include day factors in the filled data frame
filledData <- cbind(filledData, dayFactors)
meanStepsPerIntervalDayFactorWise <- aggregate(steps ~ interval +
dayFactors,
filledData, mean)
library("lattice")
xyplot(steps~interval, data=meanStepsPerIntervalDayFactorWise)
xyplot(steps~interval|dayFactors, data=meanStepsPerIntervalDayFactorWise)
xyplot(steps~interval|dayFactors, data=meanStepsPerIntervalDayFactorWise, ylab = "Number of steps", xlab="Interval")
xyplot(steps~interval | dayFactors, data=meanStepsPerIntervalDayFactorWise, ylab = "Number of steps", xlab="Interval")
xyplot(steps~interval | dayFactors, data = meanStepsPerIntervalDayFactorWise, ylab = "Number of steps", xlab="Interval", type = "l")
xyplot(steps~interval | dayFactors, data = meanStepsPerIntervalDayFactorWise, ylab = "Number of steps", xlab="Interval", type = "l", layout = c(1, 2))
